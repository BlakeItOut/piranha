# Copyright (c) 2023 Uber Technologies, Inc.
# 
# <p>Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
# except in compliance with the License. You may obtain a copy of the License at
# <p>http://www.apache.org/licenses/LICENSE-2.0
# 
# <p>Unless required by applicable law or agreed to in writing, software distributed under the
# License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied. See the License for the specific language governing permissions and
# limitations under the License.

# Replace foo().bar().baz() with `true` inside methods not nnotated as @DoNotCleanup
[[rules]]
name = "replace_call"
query = """rgx (?P<n1>foo\\(\\)\\.bar\\(\\)\\.baz\\(\\))"""
replace_node = "n1"
replace = "true"
groups = ["replace_expression_with_boolean_literal"]
[[rules.filters]]
enclosing_node = """(method_declaration) @md"""
not_contains = ["""rgx @DoNotCleanup"""]

# Before:  
# abc().def().ghi()
# abc().fed().ghi()
[[rules]]
name = "replace_call_def_fed"
query = """rgx (?P<n>abc\\(\\)\\.(?P<m_def>def)\\(\\)\\.ghi\\(\\))"""
replace_node = "m_def"
replace = "fed"


# The below three rules do a dummy type migration from List<Integer> to NewList 

# Updates the import statement from `java.util.List` to `com.uber.NEwList`
[[rules]]
name = "update_import"
query = """rgx (?P<n>java\\.util\\.List)"""
replace_node = "n"
replace = "com.uber.NewList"

# Updates the type of local variables from `List<Integer>` to `com.uber.NewList`
[[rules]]
name = "update_list_int"
query = """rgx (?P<var_decl>(?P<type>List<Integer>)\\s*(?P<name>\\w+)\\s*=.*;)"""
replace_node = "type"
replace = "NewList"
is_seed_rule = false
[[rules.filter]]
enclosing_node = "(method_declaration) @cmd"

# Updates the relevant callsite from `add` to `addToNewList`
[[rules]]
name = "update_add"
query = """rgx (?P<call>@name\\.(?P<m_name>add)\\(\\w+\\))"""
replace_node = "m_name"
replace = "addToNewList"
holes = ["name"]
is_seed_rule = false
