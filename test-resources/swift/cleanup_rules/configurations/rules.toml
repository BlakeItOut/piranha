# Copyright (c) 2022 Uber Technologies, Inc.
# 
# <p>Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
# except in compliance with the License. You may obtain a copy of the License at
# <p>http://www.apache.org/licenses/LICENSE-2.0
# 
# <p>Unless required by applicable law or agreed to in writing, software distributed under the
# License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied. See the License for the specific language governing permissions and
# limitations under the License.

# This file contains rules to the specific feature flag API.

#
# For @stale_flag_name = stale_flag and @treated = true
# Before 
#   TestEnum.stale_flag.isEnabled
# After 
#   true
#
[[rules]]
name = "test_rule_replace_true_placeholder"
query = """(
(navigation_expression
        target: (navigation_expression
            target: (simple_identifier)
            suffix: (navigation_suffix
                suffix: (simple_identifier) @param))
        suffix: (navigation_suffix
            suffix: (simple_identifier) @access_identifier)) @parameter_access
(#eq? @param "@stale_flag")
(#eq? @access_identifier "isEnabled")
)"""
replace_node = "parameter_access"
replace = "@treated"
holes = ["stale_flag", "treated"]
groups = ["replace_expression_with_boolean_literal"]
is_seed_rule = false
#
# For @stale_flag_name = stale_flag and @treated = true
# Before 
#   !TestEnum.stale_flag.isEnabled
# After 
#   false
#
[[rules]]
name = "replace_isToggleDisabled_with_boolean_literal"
query = """(
(navigation_expression
        target: (navigation_expression
            target: (prefix_expression
                operation: (bang))
            suffix: (navigation_suffix
                suffix: (simple_identifier) @param))
        suffix: (navigation_suffix
            suffix: (simple_identifier) @access_identifier)) @parameter_access
(#eq? @param "@stale_flag")
(#eq? @access_identifier "isEnabled")
)"""
replace_node = "parameter_access"
replace = "@treated_complement"
holes = ["stale_flag", "treated_complement"]
groups = ["replace_expression_with_boolean_literal"]
is_seed_rule = false
#
# For @stale_flag_name = stale_flag and @treated = true
# Before 
#   placeholder_false
# After 
#   false
#
[[rules]]
name = "test_rule_replace_false_placeholder"
query = """(
(simple_identifier) @variable
(#eq? @variable "placeholder_false")
)"""
replace_node = "variable"
replace = "false"
groups = ["replace_expression_with_boolean_literal"]
is_seed_rule = false


# rule for deletion of variable initialisation
[[rules]]
name = "delete_variable_declaration"
query = """(
    (function_declaration
        body: (function_body
            (statements
                (property_declaration
                    name: (pattern
                        bound_identifier: (simple_identifier) @hvariable
                    )
                    value: (boolean_literal) @hvalue
                ) @property_declaration
            )
        )
    )
)"""
replace_node = "property_declaration"
replace = ""

# skip the rule if variable is assigned a different value than the initial within the function body
[[rules.constraints]]
matcher = " (function_declaration) @fd"
queries = ["""(
    (assignment
        target: (directly_assignable_expression
            [ (navigation_expression
                target: (self_expression)
                suffix: (navigation_suffix
                    suffix: (simple_identifier) @var
                )
                )
                (simple_identifier) @var
            ]
            )
        result: (boolean_literal) @val
    )
    (#eq? @var "@hvariable")
    (#not-eq? @val "@hvalue")
)"""]

# skip the rule if the variable is assigned with some other value in the class scope
[[rules.constraints]]
matcher = "(class_declaration) @cd"
queries = ["""(
    (assignment
        target: (directly_assignable_expression
            [ (navigation_expression
                target: (self_expression)
                suffix: (navigation_suffix
                    suffix: (simple_identifier) @var
                )
                )
                (simple_identifier) @var
            ]
            )
        result: (boolean_literal) @val
    )
    (#eq? @var "@hvariable")
    (#not-eq? @val "@hvalue")
)"""]

[[rules]]
name = "delete_parent_assignment"
query = """(
    (assignment
        target: (directly_assignable_expression
            [ (navigation_expression
                target: (self_expression)
                suffix: (navigation_suffix
                    suffix: (simple_identifier) @avariable
                )
                )
                (simple_identifier) @avariable
            ]
            )
        result: (boolean_literal) @avalue
    ) @assignment
    (#eq? @avariable "@hvariable")
)"""
replace_node = "assignment"
replace = ""
holes = ["hvariable", "hvalue"]
is_seed_rule = false

# skip running the rule if the enclosing scope is function and the variable is being declared or initialised with a different value
[[rules.constraints]]
matcher = "(function_declaration) @fd"
queries = ["""( 
        (assignment
            target: (directly_assignable_expression
                [   (navigation_expression
                        target: (self_expression)
                        suffix: (navigation_suffix
                            suffix: (simple_identifier) @var
                        )
                    )
                    (simple_identifier) @var
                ]
            )
            result: (boolean_literal) @val
        )
        (#eq? @var "@avariable")
        (#not-eq? @val "@avalue")
)"""]

[[rules.constraints]]
matcher = "(function_declaration) @fd"
queries = ["""(
    (property_declaration
        name: (pattern
            bound_identifier: (simple_identifier) @var
        )
        value: (boolean_literal) @val
    )@property_declaration
    (#eq? @var "@avariable")
    (#not-eq? @val "@avalue")
)"""]

# skip the rule if the enclosing scope is a class and the variable is being initialised with a different value
[[rules.constraints]]
matcher = "(class_declaration) @cd"
queries = ["""(
    (property_declaration
        name: (pattern
            bound_identifier: (simple_identifier) @var
        )
        value: (boolean_literal) @val
    )@property_declaration
    (#eq? @var "@avariable")
    (#not-eq? @val "@avalue")
)"""]

[[rules.constraints]]
matcher = "(class_declaration) @cd"
queries = ["""(
    (assignment
        target: (directly_assignable_expression
            [   (navigation_expression
                    target: (self_expression)
                    suffix: (navigation_suffix
                        suffix: (simple_identifier) @var
                    )
                )
                (simple_identifier) @var
            ]
        )
        result: (boolean_literal) @val
    )
    (#eq? @var "@avariable")
    (#not-eq? @val "@avalue")
)"""]

[[rules]]
name = "delete_field_initialisation"
query = """(
    (class_declaration
        body: (class_body
            (property_declaration
                name: (pattern
                    bound_identifier: (simple_identifier) @hvariable
                )
                value: (boolean_literal) @hvalue
            ) @property_declaration
        )
    )
)"""
replace_node = "property_declaration"
replace = ""

# skip the rule if variable is assigned a different value than the initial in some method
[[rules.constraints]]
matcher = "(class_declaration) @cd"
queries = ["""(
    (assignment
        target: (directly_assignable_expression
            [ (navigation_expression
                target: (self_expression)
                suffix: (navigation_suffix
                    suffix: (simple_identifier) @var
                )
                )
                (simple_identifier) @var
            ]
        )
        result: (boolean_literal) @val
    )
    (#eq? @var "@hvariable")
    (#not-eq? @val "@hvalue")
)"""]

[[rules]]
name = "delete_field_initialisation_init"
query = """(
    (function_declaration
        name: (_)? @function
        body: (function_body
            (statements
                (assignment
                    target: (directly_assignable_expression
                        [ (navigation_expression
                            target: (self_expression)
                            suffix: (navigation_suffix
                                suffix: (simple_identifier) @hvariable
                            )
                            )
                            (simple_identifier) @hvariable
                        ]
                        )
                    result: (boolean_literal) @hvalue
                ) @assignment
            )
        )
    )
    (#eq? @function "")
)"""
replace_node = "assignment"
replace = ""

[[rules.constraints]]
matcher = "(class_declaration) @cd"
queries = ["""( 
        (assignment
            target: (directly_assignable_expression
                [   (navigation_expression
                        target: (self_expression)
                        suffix: (navigation_suffix
                            suffix: (simple_identifier) @var
                        )
                    )
                    (simple_identifier) @var
                ]
            )
            result: (boolean_literal) @val
        )
        (#eq? @var "@hvariable")
        (#not-eq? @val "@hvalue")
)"""]

[[rules.constraints]]
matcher = "(function_declaration) @fd"
queries = ["""(
    (property_declaration
        name: (pattern
            bound_identifier: (simple_identifier) @var
        )
        value: (boolean_literal) @val
    )@property_declaration
    (#eq? @var "@hvariable")
    (#not-eq? @val "@hvalue")
)"""]


[[rules]]
name = "replace_self_identifier_with_value"
query = """(
    (navigation_expression
        target: (self_expression)
        suffix: (navigation_suffix
            suffix: (simple_identifier) @identifier
        )
    ) @rep
    (#eq? @identifier "@hvariable")
)"""
replace_node = "rep"
replace = "@hvalue"
holes = ["hvariable", "hvalue"]
is_seed_rule = false

# Add one more rule for self.simpleIdentifier(ToDo) 
# skip the rule if the variable is one of the parameters of the function
[[rules.constraints]]
matcher = "(function_declaration) @fd"
queries = ["""(
    (parameter
        name: (simple_identifier) @var
    )
    (#eq? @var "@identifier")
)"""]

[[rules.constraints]]
matcher = "(class_declaration) @cd"
queries = ["""(
    (property_declaration
        name: (pattern
            bound_identifier: (simple_identifier) @variable
        )
        value: (boolean_literal) @value
    )
    (#eq? @variable "@identifier")
)"""]


[[rules]]
name = "replace_identifier_with_value"
query = """(
    (simple_identifier) @identifier
    (#eq? @identifier "@hvariable")
)"""
replace_node = "identifier"
replace = "@hvalue"
holes = ["hvariable", "hvalue"]
is_seed_rule = false

# skip the rule if the variable is one of the parameters of the function
[[rules.constraints]]
matcher = "(function_declaration) @fd"
queries = ["""(
    (parameter
        name: (simple_identifier) @var
    )
    (#eq? @var "@identifier")
)"""]

[[rules.constraints]]
matcher = "(class_declaration) @cd"
queries = ["""(
    (property_declaration
        name: (pattern
            bound_identifier: (simple_identifier) @variable
        )
        value: (boolean_literal) @value
    )
    (#eq? @variable "@identifier")
)"""]

[[rules.constraints]]
matcher = "(class_declaration) @cd"
queries = ["""(
    (navigation_expression
        target: (self_expression)
        suffix: (navigation_suffix
            suffix: (simple_identifier) @variable
        )
    )
    (#eq? @variable "@identifier")
)"""]

[[rules]]
name = "delete_field_declaration"
query = """(
    (class_declaration
        body: (class_body
            (property_declaration
                name: (pattern
                    bound_identifier: (simple_identifier) @avariable
                )
            ) @property_declaration
        )
    )
)"""
replace_node = "property_declaration"
replace = ""
is_seed_rule = false

[[rules]]
name = "delete_adhoc_declarations"
query = """(
    (property_declaration
        name: (pattern
            bound_identifier: (simple_identifier) @hvariable
        )
        value: (boolean_literal) @hvalue
    )@property_declaration
)"""
replace_node = "property_declaration"
replace = ""
is_seed_rule = false

# these should not have been declared in outer scope with a different value
[[rules.constraints]]
matcher = "(class_declaration) @cd"
queries = ["""(
    (property_declaration
        name: (pattern
            bound_identifier: (simple_identifier) @variable
        )
        value: (boolean_literal) @value
    )
    (#eq? @variable "@hvariable")
    (#not-eq? @value "@hvalue")
)"""]

# these should not be reassigned with a different value 

[[rules.constraints]]
matcher = "(class_declaration) @cd"
queries = ["""(
    (assignment
            target: (directly_assignable_expression
                [   (navigation_expression
                        target: (self_expression)
                        suffix: (navigation_suffix
                            suffix: (simple_identifier) @var
                        )
                    )
                    (simple_identifier) @var
                ]
            )
            result: (boolean_literal) @val
        )
    (#eq? @var "@hvariable")
    (#not-eq? @val "@hvalue")
)"""]
