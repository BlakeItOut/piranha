# Copyright (c) 2022 Uber Technologies, Inc.
#
# <p>Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
# except in compliance with the License. You may obtain a copy of the License at
# <p>http://www.apache.org/licenses/LICENSE-2.0
#
# <p>Unless required by applicable law or agreed to in writing, software distributed under the
# License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied. See the License for the specific language governing permissions and
# limitations under the License.

# The language specific rules in this file are applied after the API specific change has been performed.

# Dummy rule that acts as a junction for all boolean based cleanups
[[rules]]
name = "boolean_literal_cleanup"

# Before :
#  !false
# After :
#  true
#
[[rules]]
groups = ["boolean_expression_simplify"]
name = "simplify_not_false"
query = """
(
    (unary_expression
        operand: [
            (false)
            operator: "!"
            (parenthesized_expression (false))
        ]
    ) @unary_expression
)
"""
replace = "true"
replace_node = "unary_expression"

# Before :
#  !true
# After :
#  false
#
[[rules]]
groups = ["boolean_expression_simplify"]
name = "simplify_not_true"
query = """
(
    (unary_expression
        operand: [
            (true)
            operator: "!"
            (parenthesized_expression (true))
        ]
    ) @unary_expression
)
"""
replace = "false"
replace_node = "unary_expression"

[[rules]]
groups = ["boolean_expression_simplify"]
name = "simplify_true_and_something"
query = """
(
    (binary_expression
        left: [(true) (parenthesized_expression (true))]
        operator:"&&"
        right : (_)* @rhs
    ) @binary_expression
)
"""
replace = "@rhs"
replace_node = "binary_expression"

# Before :
#  abc() && true
# After :
#  abc()
#
[[rules]]
groups = ["boolean_expression_simplify"]
name = "simplify_something_and_true"
query = """
(
    (binary_expression
        left : (_)* @lhs
        operator:"&&"
        right: [(true) (parenthesized_expression (true))]
    ) @binary_expression
)
"""
replace = "@lhs"
replace_node = "binary_expression"

# Before :
#  false && abc()
# After :
#  false
#
[[rules]]
groups = ["boolean_expression_simplify"]
name = "simplify_false_and_something"
query = """
(
    (binary_expression
        left: [(false) (parenthesized_expression (false))]
        operator : "&&"
        right : (_)* @rhs
    ) @binary_expression
)
"""
replace = "false"
replace_node = "binary_expression"

# Before :
#  abc() && false
# After :
#  false
#
[[rules]]
name = "simplify_something_and_false"
groups = ["boolean_expression_simplify"]
query = """
(
    (binary_expression
        left : (_)* @lhs
        operator : "&&"
        right: [(false) (parenthesized_expression (false))]
    ) @binary_expression
)
"""
replace = "false"
replace_node = "binary_expression"

# Before :
#  abc() || true
# After :
#  true
#
[[rules]]
groups = ["boolean_expression_simplify"]
name = "simplify_something_or_true"
query = """
(
    (binary_expression
        left : (_)* @lhs
        operator:"||"
        right: [(true) (parenthesized_expression (true))]
    ) @binary_expression
)
"""
replace = "true"
replace_node = "binary_expression"

# Before :
#  true || abc()
# After :
#  true
#
[[rules]]
groups = ["boolean_expression_simplify"]
name = "simplify_true_or_something"
query = """
(
    (binary_expression
        left : [(true) (parenthesized_expression (true))]
        operator:"||"
        right: (_)* @rhs
    ) @binary_expression
)
"""
replace = "true"
replace_node = "binary_expression"

# Before:
#  abc() || false
# After :
#  abc()
#
[[rules]]
groups = ["boolean_expression_simplify"]
name = "simplify_something_or_false"
query = """
(
    (binary_expression
        left : (_)* @lhs
        operator:"||"
        right: [(false) (parenthesized_expression (false))]
    ) @binary_expression
)
"""
replace = "@lhs"
replace_node = "binary_expression"

# Before:
#  false || abc()
# After :
#  abc()
#
[[rules]]
groups = ["boolean_expression_simplify"]
name = "simplify_false_or_something"
query = """
(
    (binary_expression
        left : [(false) (parenthesized_expression (false))]
        operator:"||"
        right: (_)* @rhs
    )
@binary_expression)"""
replace = "@rhs"
replace_node = "binary_expression"

# Dummy rule that acts as a junction for all statement based cleanups
[[rules]]
name = "statement_cleanup"

# Before :
#  if (true) { doSomething(); }
# After :
#  { doSomething(); }
#
# Before :
#  if (true) { doSomething(); } else { doSomethingElse();}
# After :
#  { doSomething(); }
#
[[rules]]
groups = ["if_cleanup"]
name = "simplify_if_statement_true"
query = """
(
    (if_statement
        condition : (
            [
                (true)
                (parenthesized_expression (true))
            ]
        )
        consequence : ((block) @consequence)
    ) @if_statement
)
"""
replace = "@consequence"
replace_node = "if_statement"

# Before :
#  if (true) { doSomething(); } else { doSomethingElse();}
# After :
#  { doSomethingElse(); }
#
# Before :
#  if (true) { doSomething(); }
# After :
#
[[rules]]
groups = ["if_cleanup"]
name = "simplify_if_statement_false"
query = """
(
    (if_statement
        condition : (
            [
                (false)
                (parenthesized_expression (false))
            ]
        )
        consequence : (_)
        alternative: ((_) @alternative) ?
    ) @if_statement
)
"""
replace = "@alternative"
replace_node = "if_statement"

# Before :
#  {
#     someStepsBefore();
#     {
#        someSteps();
#     }
#     someStepsAfter();
#  }
# After :
#  {
#     someStepsBefore();
#        someSteps();
#     someStepsAfter();
#  }
#
# Note that we need to tag basically all nodes here.
# Including not so obvious ones: @outer.stmt_list and @outer.block
[[rules]]
name = "remove_unnecessary_nested_block"
query = """
(
    (block
        (statement_list
            (_)* @pre
            (block
                (statement_list) @nested.statements
            ) @nested.block
            (_)* @post
        ) @outer.stmt_list
    ) @outer.block
)
"""
replace = "@nested.statements"
replace_node = "nested.block"

# TODO: rules and edges for "if with short statement"
# collect examples and write tests for it
# https://go.dev/tour/flowcontrol/6
# https://go.dev/doc/effective_go#if

# TODO: we need a different rule for `nil != err`
# left: [
#     (identifier) @id
#     (nil)
# ]
# making `left` and `right` options could lead to `(identifier) != (identifier)`

# Removes an `if err != nil` immediately after a short_var_declaration that got replaced
# Before:
#   enabled, err := true // does not compile
#   if err != nil { // something }
# After:
#   enabled, err := true // does not compile
#
[[rules]]
name = "delete_immediate_if_err"
query = """
(
    (short_var_declaration
        left: (expression_list
            (identifier) @bool_id
            (identifier) @err_id
        )
        right:
        (expression_list
            ([
                (true)
                (false)
            ]) @bool_value
            .
        )
    ) @short_v_decl
    .
    (if_statement
        condition: (binary_expression
            left: (identifier) @lhs.id
            operator: "!="
            right: (nil)
        ) @condition
    ) @if_stmt
    (#eq? @lhs.id @err_id)
)
"""
replace = ""
replace_node = "if_stmt"


# Replaces a short_var_declaration with 2 identifier on the LHS and only one
# bool value on the RHS.
# That's code that does not compile and an intermediate state from previous rules.
#
# Will remove:
#   a, e := false
# Receives from previous rule (holes):
#   @bool_id: a, @err_id: e, @bool_value: false
# Will propagate:
#   @variable_name: a, @value: false
#
[[rules]]
name = "delete_bool_err_short_var_declaration"
query = """
(
    (short_var_declaration
        left: (expression_list
            (identifier) @variable_name
            (identifier) @rhs_id
        )
        right:
        (expression_list
            ([
                (true)
                (false)
            ]) @value
            .
        )
    ) @short_v_decl
    (#eq? @variable_name "@bool_id")
    (#eq? @rhs_id "@err_id")
    (#eq? @value "@bool_value")
)
"""
replace = ""
replace_node = "short_v_decl"
holes = ["bool_id", "err_id", "bool_value"]

# Check if there is no assignment where the variable @variable_name is
# assigned to a value other than @init, within the method/function body
[[rules.constraints]]
matcher = """
(
    ([
        (function_declaration)
        (method_declaration)
    ]) @fm_declaration
)
"""
queries = [
    """
        (
            (assignment_statement
                left: (expression_list
                    (identifier) @a.lhs
                )
                right: (expression_list) @a.rhs
            ) @assignment
            (#eq? @a.lhs "@variable_name")
            (#not-eq? @a.rhs "@value")
        )
    """
]

[[rules]]
name = "replace_identifier_with_value"
query = """
(
    (identifier) @identifier
    (#eq? @identifier "@variable_name")
)
"""
replace = "@value"
replace_node = "identifier"
holes = ["variable_name", "value"]
