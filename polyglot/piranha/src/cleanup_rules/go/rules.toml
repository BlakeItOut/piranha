# Copyright (c) 2022 Uber Technologies, Inc.
#
# <p>Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file
# except in compliance with the License. You may obtain a copy of the License at
# <p>http://www.apache.org/licenses/LICENSE-2.0
#
# <p>Unless required by applicable law or agreed to in writing, software distributed under the
# License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
# express or implied. See the License for the specific language governing permissions and
# limitations under the License.

# The language specific rules in this file are applied after the API specific change has been performed.

# Dummy rule that acts as a junction for all boolean based cleanups
[[rules]]
name = "boolean_literal_cleanup"

# Before :
#  !false
# After :
#  true
#
[[rules]]
groups = ["boolean_expression_simplify"]
name = "simplify_not_false"
query = """
(
    (unary_expression
        operand: [
            (false)
            operator: "!"
            (parenthesized_expression (false))
        ]
    ) @unary_expression
)
"""
replace = "true"
replace_node = "unary_expression"

# Before :
#  !true
# After :
#  false
#
[[rules]]
groups = ["boolean_expression_simplify"]
name = "simplify_not_true"
query = """
(
    (unary_expression
        operand: [
            (true)
            operator: "!"
            (parenthesized_expression (true))
        ]
    ) @unary_expression
)
"""
replace = "false"
replace_node = "unary_expression"

[[rules]]
groups = ["boolean_expression_simplify"]
name = "simplify_true_and_something"
query = """
(
    (binary_expression
        left: [(true) (parenthesized_expression (true))]
        operator:"&&"
        right : (_)* @rhs
    ) @binary_expression
)
"""
replace = "@rhs"
replace_node = "binary_expression"

# Before :
#  abc() && true
# After :
#  abc()
#
[[rules]]
groups = ["boolean_expression_simplify"]
name = "simplify_something_and_true"
query = """
(
    (binary_expression
        left : (_)* @lhs
        operator:"&&"
        right: [(true) (parenthesized_expression (true))]
    ) @binary_expression
)
"""
replace = "@lhs"
replace_node = "binary_expression"

# Before :
#  false && abc()
# After :
#  false
#
[[rules]]
groups = ["boolean_expression_simplify"]
name = "simplify_false_and_something"
query = """
(
    (binary_expression
        left: [(false) (parenthesized_expression (false))]
        operator : "&&"
        right : (_)* @rhs
    ) @binary_expression
)
"""
replace = "false"
replace_node = "binary_expression"

# Before :
#  abc() && false
# After :
#  false
#
[[rules]]
name = "simplify_something_and_false"
groups = ["boolean_expression_simplify"]
query = """
(
    (binary_expression
        left : (_)* @lhs
        operator : "&&"
        right: [(false) (parenthesized_expression (false))]
    ) @binary_expression
)
"""
replace = "false"
replace_node = "binary_expression"

# Before :
#  abc() || true
# After :
#  true
#
[[rules]]
groups = ["boolean_expression_simplify"]
name = "simplify_something_or_true"
query = """
(
    (binary_expression
        left : (_)* @lhs
        operator:"||"
        right: [(true) (parenthesized_expression (true))]
    ) @binary_expression
)
"""
replace = "true"
replace_node = "binary_expression"

# Before :
#  true || abc()
# After :
#  true
#
[[rules]]
groups = ["boolean_expression_simplify"]
name = "simplify_true_or_something"
query = """
(
    (binary_expression
        left : [(true) (parenthesized_expression (true))]
        operator:"||"
        right: (_)* @rhs
    ) @binary_expression
)
"""
replace = "true"
replace_node = "binary_expression"

# Before:
#  abc() || false
# After :
#  abc()
#
[[rules]]
groups = ["boolean_expression_simplify"]
name = "simplify_something_or_false"
query = """
(
    (binary_expression
        left : (_)* @lhs
        operator:"||"
        right: [(false) (parenthesized_expression (false))]
    ) @binary_expression
)
"""
replace = "@lhs"
replace_node = "binary_expression"

# Before:
#  false || abc()
# After :
#  abc()
#
[[rules]]
groups = ["boolean_expression_simplify"]
name = "simplify_false_or_something"
query = """
(
    (binary_expression
        left : [(false) (parenthesized_expression (false))]
        operator:"||"
        right: (_)* @rhs
    )
@binary_expression)"""
replace = "@rhs"
replace_node = "binary_expression"

# Dummy rule that acts as a junction for all statement based cleanups
[[rules]]
name = "statement_cleanup"

# Before :
#  if (true) { doSomething(); }
# After :
#  { doSomething(); }
#
# Before :
#  if (true) { doSomething(); } else { doSomethingElse();}
# After :
#  { doSomething(); }
#
[[rules]]
groups = ["if_cleanup"]
name = "simplify_if_statement_true"
query = """
(
    (if_statement
        condition : (
            [
                (true)
                (parenthesized_expression (true))
            ]
        )
        consequence : ((block) @consequence)
    ) @if_statement
)
"""
replace = "@consequence"
replace_node = "if_statement"

# Before :
#  if (true) { doSomething(); } else { doSomethingElse();}
# After :
#  { doSomethingElse(); }
#
# Before :
#  if (true) { doSomething(); }
# After :
#
[[rules]]
groups = ["if_cleanup"]
name = "simplify_if_statement_false"
query = """
(
    (if_statement
        condition : (
            [
                (false)
                (parenthesized_expression (false))
            ]
        )
        consequence : (_)
        alternative: ((_) @alternative) ?
    ) @if_statement
)
"""
replace = "@alternative"
replace_node = "if_statement"

# Before :
#  {
#     someStepsBefore();
#     {
#        someSteps();
#     }
#     someStepsAfter();
#  }
# After :
#  {
#     someStepsBefore();
#        someSteps();
#     someStepsAfter();
#  }
#
# Note that we need to tag basically all nodes here.
# Including not so obvious ones: @outer.stmt_list and @outer.block
[[rules]]
name = "remove_unnecessary_nested_block"
query = """
(
    (block
        (statement_list
            (_)* @pre
            (block
                (statement_list) @nested.statements
            ) @nested.block
            (_)* @post
        ) @outer.stmt_list
    ) @outer.block
)
"""
replace = "@nested.statements"
replace_node = "nested.block"
